https://www.youtube.com/watch?v=gTrYFwMichk

Metodo STAR
Situacion Tark Action Result



Perguntas e assuntos para estudar sobre entrevista de QA
	
	#SoftSkill
1 - Me conta uma situação que sua escolha foi errada, como você percebeu isso e corrigiu?
Relacionado a soft skills...
Exemplo:
R: Em algum momento eu escolhi X  software e conforme utilização percebeu a falta de documentação e conteúdos em foruns e a eequipe decidiu mudar de framework. 
Minha Resposta:


	#Back-end
2 - Qual a diferença de plataformas de serviços síncronas e assíncronas?
R: Geralmente você consegue implementar arquitetura de microserviços de formas diferentes, síncronos implementados com API REST ou SOAP você bloqueia esperando a respostas, e assíncronas geralmente são implementadas com serviços de Mensageira Kafka, rabbitmq, GraphQL métodos http get post push etc. 


	#Processo
		3.a - O que é BDD (BEHAVIOR DRIVER DEVELOPMENT) e como ele ajuda a sua equipe?
R: BDD (Behavior Driven Development) é uma técnica de desenvolvimento de software que se concentra em compreender o comportamento do sistema sob teste. Ele usa linguagem natural para descrever os comportamentos esperados do sistema e, em seguida, escreve testes de unidade para garantir que o comportamento está de acordo com o esperado. O BDD ajuda a equipe a entender os requisitos do sistema de maneira mais clara e a garantir que o código produzido atenda a esses requisitos. Além disso, o BDD pode ajudar a equipe a identificar problemas e erros no código mais cedo no processo de desenvolvimento, o que pode economizar tempo e esforço na correção de problemas mais tarde.

		3.b - O que é TDD ( TEST DRIVER DEVELOPMENT) e como ele ajuda sua equipe?
R: TDD (Test Driven Development) é uma técnica de desenvolvimento de software em que o desenvolvedor escreve testes de unidade antes de escrever o código de implementação. O objetivo é garantir que o código atenda aos requisitos especificados e esteja correto. Isso ajuda a equipe a garantir que o código produzido atenda aos requisitos e esteja livre de erros, o que pode levar a um processo de desenvolvimento mais eficiente e a produtos de software de qualidade. Além disso, o TDD pode ajudar a equipe a identificar problemas e erros no código mais cedo no processo de desenvolvimento, o que pode economizar tempo e esforço na correção de problemas mais tarde.

	#DevOps
4 - O que é CI-CD e qual sua importância em equipes ágeis?
R: Continuous integration - Continuous delivery -> Em equipes ágeis onde entregamos software com frequência precisamos de meios para atualizar os packages e os testes, e a automação é muito importante neste processo. 


	#Automação
5 - Como você cria um framework de teste automatizado?
O que é uma framework de teste automatizado: ?
Como você avalia as ferramentas que vão entrar nesse framework: ?
Qual a linguagem de programação: ?

R: teste de api jUnit para rodar os testes, gradle para juntar as dependencias, linguagem java, selenium ou cucumber.



	#Técnicas de teste
			6 - Quais técnicas existem e os metodos de aplicação
	6A - Teste de caixa preta: teste de caixa preta é uma técnica de teste em que o tester não tem nenhum conhecimento interno do sistema que está sendo testado. O tester apenas fornece entradas e verifica as saídas. Este tipo de teste é útil para verificar se o sistema está funcionando corretamente e se as saídas estão de acordo com o esperado.

	6B - Teste de caixa branca: teste de caixa branca é uma técnica de teste em que o tester tem conhecimento interno da estrutura do sistema que está sendo testado. O tester pode usar essa informação para criar casos de teste mais detalhados e focados, verificando se o sistema está funcionando corretamente em um nível mais detalhado.

	6C - Teste de caixa cinza: teste de caixa cinza é uma técnica de teste em que o tester tem algum conhecimento interno do sistema, mas não todos os detalhes. O tester pode usar essa informação para criar casos de teste que cubram vários aspectos do sistema, mas não todos os detalhes.

	6D - Teste unitário: teste unitário é uma técnica de teste em que cada componente de um sistema é testado individualmente para garantir que está funcionando corretamente.

	7E - Automação de teste: automação de teste é o processo de usar ferramentas de software para automatizar o processo de teste. Isso pode ajudar a economizar tempo e esforço, pois os testes podem ser executados rapidamente e repetidamente.

	8F - Caso de teste: um caso de teste é um conjunto de condições ou dados usados para verificar se um sistema está funcionando corretamente. Cada caso de teste pode conter vários passos, cada um verificando uma condição ou saída específica.




	


	#Pirâmide de testes
7 - Aprender as técnicas e niveis. Entender para que a pirâmide serve:
R: Os testes em niveis mais altos na pirâmide levam mais tempo para ser realizados, geralmente os testes em niveis mais baixos na pirâmide são executados com mais frequência e com mais "unidades" de teste.
R: Já os testes em níveis mais altos demandam muita coisa para serem analisados, então geralmente os times gastam energia nos niveis baixos.
R: Manter os testes nas camadas baixas para isolar eles, ter mais quantidade de testes nessas camadas.

		<Manual Exploratory Tests>
Topo pirâmide:	Automated e2e Tests
Meio piramide:	Automated API Tests
Meio piramide:	Automated Integration Tests
Meio piramide:	Automated Component Tests	
Base piramide:	Automated Unit Tests

	
	#Requisitos
8 - Diferença dos requisitos.

Exemplo: Programa para venda de remédio em uma farmácia

@Requisitos:    O programa deve ser capaz de faturar uma venda. - Funcional
		Quero que o programa salve os dados ao final do dia - Funcional
		Quero que o programa emita notas fiscais - Funcional
		Quero que a venda seja faturada em até 3 segundos - Não funcional, no caso desempenho
		Quero que os dados sejam seguros - Não funcional, no caso segurança


Regras de negócio é preciso respeitar de acordo com software que é desenvolvido
@Regras de negócio: RN1: Cada venda de medicamentos deve pagar imposto de 20%.
		    RN2: para antibioticos precisamos reter a receita


Historia ou estória de usuário: Vem do SCRUM, Metologias ágeis.
			Funcional
@User Stories:  Como: vendedor da farmácia
		Eu quero: poder faturar uma venda
		Para: ter mais agilidade e organização na minha farmácia
			Não Funcional
		Como: vendedor da farmácia
		Eu quero: faturar uma venda rapida (3ms)
		Para: Para que meu cliente não desista da compra


@Critérios de aceitação: 

#São elementos que eu olho para saber se minha estória de usuário está pronta ou não. 


			#AC1: 
			Dado: que eu preencho os dados de venda com informações validas
			Quando: faturar minha venda
			Então: a venda deve ser realizada com sucesso.

			#AC2: 
			Dado: que eu quero realizar uma venda com segurança
			Quando: quando a venda for efetivada
			Então: meus dados devem ser salvos de forma a não estar disponível na internet.
			
@Cenários de teste:
		Possiveis cenários de uso do meu software (AC's)


@Casos de teste:
		Contém 1 ou mais cenários.
	

